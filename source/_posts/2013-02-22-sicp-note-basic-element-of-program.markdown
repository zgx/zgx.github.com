---
layout: post
title: "程序设计的基本元素——SICP阅读笔记"
date: 2013-02-22 20:05
comments: true
categories: 
---

一种好的编程语言，不仅仅是一种指挥计算机执行任务的方式，它还应该成
为一种框架，是我们能够在其中组织自己有关计算过程的思想。这样，当我
们描述一个语言时，就需要将注意力放在这一语言所提供的，能够将简单认
识组合起来形成更复杂认识的方法方面，每一种强有力的语言都为此提供了
三种机制：
<!--more-->
- *基本表达形式*，用于表示语言所关心的最简单个体。
- *组合的方法*，通过它们可以从简单的东西出发构造出复合的元素。
- *抽象的方法*，通过他们可以为复合对象命名，并将当作单元去操作。

在程序设计中，我们需要处理两类要素：过程和数据（它们实际上并不是这
样严格分离的）。非形式地说，数据是一种我们希望去操作的“东西”，而
过程就是有关操作这些数据的规则的描述。这样，任何强有力的程序设计语
言都必须能表述基本的数据个基本的过程，还需要提供对过程和数据进行组
合和抽象的方法。

##Lisp表达式

我们使用的Lisp方言是Scheme，解析器使用Guile。用键盘输入一个表达式，
解析器的相应就是将它对这一表达式的求值结果显示出来。

一种基本表达式就是数。如给解析器输入一个数（下面的">"号是解析器输入，
不是我们输入的一部分）

	>486
解析器的响应是打印出
	486

可以用基本过程的表达式（例如+或者\*），将表示数的表达式组合起来，
形成复合表达式，以表示要把有关过程应用于这些数，例如：
	>(+ 137 349)
	486

	>(/ 10 5)
	2

	>(* 2 6 12)
	144

像上面这样的表达式称为组合式，其构成方式是用一对括号括起来一些表达式，
形成一个*表*，用于表示一个过程应用。在表最左边的元素成为运算符，其他
元素都称为运算对象。求值的过程就是将由运算符所刻画的过程应用于有关
的实际参数（运算对象的值）。

组合式的元素本身也可以是组合式：

	>(- (* 3 5) (+ 5 6))
	4

不但运算对象可以是组合式，运算符也可以是组合式，这个后续再讲。

##命名
通过名字去使用计算对象，这是编程语言必不可少的方面。我们将名字标识符
称为变量，它的值就是他所对应的那个对象。

在Scheme里，给事物命名通过`define`的方式完成：
	>(define size 2)

会导致解析器将值2与名字相关联。此后，我们就可以通过这个名字出引用值2了：
	>size
	2

应该看到，我们可以将值与符号关联，而后又能提取出这些值，这意味着解析器
必须维持某种存储能力，以便保持有关的名字-值对偶的轨迹，这种存储成为
环境。环境为求值过程的进行提供了种上下文，对于我们理解程序的执行起
着极其重要的作用。

