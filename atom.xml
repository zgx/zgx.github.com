<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[横竖弯钩]]></title>
  <link href="http://hswg.info/atom.xml" rel="self"/>
  <link href="http://hswg.info/"/>
  <updated>2013-04-24T11:35:27+08:00</updated>
  <id>http://hswg.info/</id>
  <author>
    <name><![CDATA[横竖弯钩]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EC2产生费用了——源于匿名代理]]></title>
    <link href="http://hswg.info/blog/2013/04/24/ec2-s-fare/"/>
    <updated>2013-04-24T11:12:00+08:00</updated>
    <id>http://hswg.info/blog/2013/04/24/ec2-s-fare</id>
    <content type="html"><![CDATA[<p>申请了亚马逊一年的免费实例。一个月以来都没有产生什么费用（除了申请了公网IP
一天没用绑定实例产生的0.07刀），前台一天之内突然产生了11刀的费用，当时我震惊了。</p>

<p><img src="http://bcs.duapp.com/picfile/2013/4/0fb8d280dde1d485.png" alt="EC2 FARE" /></p>

<p>这一切原因手贱用squid搭了个代理服务器，当时懒得设用户验证，弄成匿名代理了，
杯具就此开始。到现在各个代理信息站点还留着那个服务器的匿名代理信息。在网络
上开任何端口都是逃不过各种扫描的，侥幸是不存在的。</p>

<p><img src="http://bcs.duapp.com/picfile/2013/4/57d5ba0fb0df4ac7.png" alt="proxy info" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu下搭建代理服务器]]></title>
    <link href="http://hswg.info/blog/2013/04/20/setup-proxy-server-on-ubuntu/"/>
    <updated>2013-04-20T20:30:00+08:00</updated>
    <id>http://hswg.info/blog/2013/04/20/setup-proxy-server-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>安装squid</h2>

<pre><code>sudo apt-get install squid
</code></pre>

<h2>squid配置</h2>

<p>squid的配置文件在：<code>/etc/squid3/squid.conf</code>。这个文件有很详细的说明，
不过对于我来说是太啰嗦了。记下几个配置要点，以后照着操作就是了。</p>

<p>找到<code>http_access deny all</code>，将<code>deny</code>改成<code>allow</code>。意思是允许任何IP使用这个代理。</p>

<pre><code>http_access allow all
</code></pre>

<p>配置端口，这是服务器的监听端口，也就是客户端连接服务器时配置的端口，这里保持默认。</p>

<pre><code>http_port 3128
</code></pre>

<p>缓存大小设置</p>

<pre><code>cache\_mem 32 MB #vps的配置文件在内存很小，还是节省点吧。
</code></pre>

<p>重启squid</p>

<pre><code>sudo service squid restart
</code></pre>

<p>然后在客户端设置代理测试即可。</p>

<p>现在这个配置是运行任何IP匿名访问的，可以配置基于用户名密码的访问控制，目前用不到，
以后再写了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码阅读笔记——Configurable]]></title>
    <link href="http://hswg.info/blog/2013/03/24/configurable-of-tornado-note/"/>
    <updated>2013-03-24T03:29:00+08:00</updated>
    <id>http://hswg.info/blog/2013/03/24/configurable-of-tornado-note</id>
    <content type="html"><![CDATA[<p>Configurable类位于tornado.utils模块，继承它的类的可以承担工厂方法的职责，可以根据配置或环境决定示例化那个子类。</p>

<p>在tornado中，IOLoop便是继承Confifurable的的一个例子。IOLoop的职责有定义操作接口和根据说在的操作系统决定实例化那个子类，
如下图，Linux支持epoll，BSD支持kqueue，而在Windows就只能选择Select了。用户在使用IOLoop时，是需要IOLoop接口，
而不必关注实际使用的是那个实现，而样写出来的代码可移植性就更好了。</p>

<!--more-->


<p><img src="http://bcs.duapp.com/picfile/2013/3/76f7caa0b2bcfde0.png" alt="ULM图" /></p>

<p>继承Configurable的类应该实现如下方法：</p>

<ul>
<li>configurable_base. 这是一个类方法，一般返回</li>
<li>configurable_default. 类方法。此方法由子类实现，应当返回一个恰当的类型。这个就是工厂方法实现的地方。</li>
<li>initialize. 实例方法。实例后由Configurable调用，代替<strong>init</strong>的作用。</li>
</ul>


<p>下面是Configurable的<strong>new</strong>方法，Configurable的魔法正是由这个方法执行的。</p>

<pre><code>def __new__(cls, **kwargs):
    base = cls.configurable_base()
    args = {}
    if cls is base:
        impl = cls.configured_class()
        if base.__impl_kwargs:
            args.update(base.__impl_kwargs)
    else:
        impl = cls
    args.update(kwargs)
    instance = super(Configurable, cls).__new__(impl)
    # initialize vs __init__ chosen for compatiblity with AsyncHTTPClient
    # singleton magic.  If we get rid of that we can switch to __init__
    # here too.
    instance.initialize(**args)
    return instance
</code></pre>

<p>下面我们看下IOLoop是如何实现工厂的职责的。
IOLoop一般只用一个实例，下面是获得IOLoop的全局单例的方法，可以看到这里并没有为IOLoop选择具体的实现。</p>

<pre><code>@staticmethod
def instance():
    if not hasattr(IOLoop, "_instance"):
        with IOLoop._instance_lock:
            if not hasattr(IOLoop, "_instance"):
                # New instance after double check
                IOLoop._instance = IOLoop()
    return IOLoop._instance
</code></pre>

<p>下面来看 configurable方法，很简单，就是返回IOLoop类。</p>

<pre><code>@classmethod
def configurable_base(cls):
    return IOLoop
</code></pre>

<p>接着看configurable_default方法，这里就是IOLoop根据平台，选择具体实现的地方了。</p>

<pre><code>@classmethod
def configurable_default(cls):
    if hasattr(select, "epoll") or sys.platform.startswith('linux'):
        try:
            from tornado.platform.epoll import EPollIOLoop
            return EPollIOLoop
        except ImportError:
            gen_log.warning("unable to import EPollIOLoop, falling back to SelectIOLoop")
            pass
    if hasattr(select, "kqueue"):
        # Python 2.6+ on BSD or Mac
        from tornado.platform.kqueue import KQueueIOLoop
        return KQueueIOLoop
    from tornado.platform.select import SelectIOLoop
    return SelectIOLoop
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Python在SAE写一个生成缩略图的API]]></title>
    <link href="http://hswg.info/blog/2013/03/21/write-a-thumbnail-api/"/>
    <updated>2013-03-21T21:38:00+08:00</updated>
    <id>http://hswg.info/blog/2013/03/21/write-a-thumbnail-api</id>
    <content type="html"><![CDATA[<p>其实这是一个无聊的工具，此API有几大功能：</p>

<ol>
<li>通常会让你的图片加载变慢</li>
<li>消耗我的云豆</li>
<li>你不需要自己保存缩略图</li>
</ol>


<!--more-->


<p><img src="http://xtask.sinaapp.com/thumbnail.png?src=http://bcs.duapp.com/picfile/2013/1/2eaccc638a524c63.jpg&amp;width=300&amp;height=300" alt="二雪人" /></p>

<p>调用示例：</p>

<blockquote><p>http://xtask.sinaapp.com/thumbnail.png?src=http://bcs.duapp.com/picfile/2013/1/2eaccc638a524c63.jpg&amp;width=300&amp;height=300</p></blockquote>

<p>参数说明：</p>

<ul>
<li>src：原图片地址</li>
<li>width:最大宽度</li>
<li>height：最大高度</li>
<li>注：不会改变比例，不会把图片变大。</li>
</ul>


<p>基于Tornado写的，简单贴下代码，有问题可以留言哦。</p>

<pre><code>class ThumbMaker(RequestHandler):
    def get(self):
        try:
            srcUrl = self.get_argument('src', None)
            if not srcUrl:
                    raise Exception
            width = int(self.get_argument('width', 0xfffff))
            height = int(self.get_argument('height', 0xfffff))

            rsp = urllib2.urlopen(srcUrl)
            imgIo = StringIO(rsp.read())
            im = Image.open(imgIo)
            #if im.mode != "RGB":
            #       im = im.convert("RGB")
            im.thumbnail((width, height), Image.ANTIALIAS)
            imgOut = StringIO()
            im.save(imgOut, 'png')
            self.set_header('Content-Type', 'image/png')
            self.write(imgOut.getvalue())
        except Exception, e:
            print str(e)
            self.set_header('Content-Type', 'image/png')
            self.write(open('nopic.png').read())
        return
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python处理图像]]></title>
    <link href="http://hswg.info/blog/2013/03/03/python-processing-images/"/>
    <updated>2013-03-03T21:29:00+08:00</updated>
    <id>http://hswg.info/blog/2013/03/03/python-processing-images</id>
    <content type="html"><![CDATA[<p>PIL(Python Imaging Library)是Pytho下的一个图像处理库，支持多种图片格式，提供
强大的图像处理和绘图功能。在<a href="http://www.pythonware.com/products/pil/index.htm">官网</a>
下载即可使用，或者使用pip安装：</p>

<pre><code>pip install pil
</code></pre>

<!--more-->


<h2>使用Image模块</h2>

<p>Image是PIL中的一个类，是图像的抽象。同时提供一系列工厂方法，包括从文件加载图像
、创建新图像。</p>

<p>引用Image模块</p>

<pre><code>from PIL import Image
</code></pre>

<p>从文件加载图像，并返回Image的实例：</p>

<pre><code>im = Image.open('filename.jpg')
#这里可以传入文件夹，或者文件对象
</code></pre>

<h3>创建缩略图</h3>

<p>这是我使用PIL的直接原因，优先学习。查了下Image的文档，有一个方法叫<code>thumbnail</code>,
我想我找到答案了。</p>

<p><strong>thumbnail(size, resample=0)</strong></p>

<p>功能：创建缩略图。本方法会修改对象自身，如果要保留原来的图片，请想调用Copy，保存下来。
返回：None。</p>

<p>参数：size:缩略图的大小，如：(100,75)。注意，这不是无条件转换的，比原图大的不转，
会保留图片的比例，实际缩小比例是：min(缩略长/原长, 缩略宽/原宽).</p>

<p>resample:重采样模式。支持模式有：NEAREST, BILINEAR, BICUBIC, or ANTIALIAS。</p>

<p>使用示例：</p>

<pre><code>from PIL import Image
im = Image.open('mypic.jpg')   #加载图片，创建Image实例
im.thumbnail((120,100), Image.ANTIALIAS)  #抗锯齿模式产生缩略图
im.save('thumb_mypic.jpg')     #保存
</code></pre>

<p>小技巧：如果想要产生的缩略图的宽度固定，高度根据比例变化，可以吧高度设为一个很大值。如：</p>

<pre><code>im.thumbnail((100, 0xfffff))    #宽度为100px。除非高度大于0xfffff
</code></pre>

<h3>其他我用到的功能</h3>

<p>下面简单介绍下PIL的其他技能。</p>

<p><strong>resize(size, filter)</strong> => image</p>

<p>传入参数size为元组(width, height), filter的可以模式有：NEAREST，BILINEAR，BICUBIC，ANTIALIAS。</p>

<p>返回改变大小后的Image对象。这个跟缩略图不一样，这里的size是无条件的，会改变图片比例。</p>

<p><strong>rotate(angle)</strong> => image
返回经过旋转处理的图片。</p>

<p>未完待续。。。</p>

<p>续集请查看文档：http://www.pythonware.com/library/pil/handbook/image.htm</p>

<h3>遇到的问题</h3>

<p>处理jepg格式的文件时，报错&#8221;IOError: decoder jpeg not available&#8221;。
解决办法，安装libjpeg，然后重新安装PIL。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序设计的基本元素——SICP阅读笔记]]></title>
    <link href="http://hswg.info/blog/2013/02/22/sicp-note-basic-element-of-program/"/>
    <updated>2013-02-22T20:05:00+08:00</updated>
    <id>http://hswg.info/blog/2013/02/22/sicp-note-basic-element-of-program</id>
    <content type="html"><![CDATA[<p>一种好的编程语言，不仅仅是一种指挥计算机执行任务的方式，它还应该成
为一种框架，是我们能够在其中组织自己有关计算过程的思想。这样，当我
们描述一个语言时，就需要将注意力放在这一语言所提供的，能够将简单认
识组合起来形成更复杂认识的方法方面，每一种强有力的语言都为此提供了
三种机制：</p>

<!--more-->


<ul>
<li><em>基本表达形式</em>，用于表示语言所关心的最简单个体。</li>
<li><em>组合的方法</em>，通过它们可以从简单的东西出发构造出复合的元素。</li>
<li><em>抽象的方法</em>，通过他们可以为复合对象命名，并将当作单元去操作。</li>
</ul>


<p>在程序设计中，我们需要处理两类要素：过程和数据（它们实际上并不是这
样严格分离的）。非形式地说，数据是一种我们希望去操作的“东西”，而
过程就是有关操作这些数据的规则的描述。这样，任何强有力的程序设计语
言都必须能表述基本的数据个基本的过程，还需要提供对过程和数据进行组
合和抽象的方法。</p>

<h2>Lisp表达式</h2>

<p>我们使用的Lisp方言是Scheme，解析器使用Guile。用键盘输入一个表达式，
解析器的相应就是将它对这一表达式的求值结果显示出来。</p>

<p>一种基本表达式就是数。如给解析器输入一个数（下面的&#8221;>&#8221;号是解析器输入，
不是我们输入的一部分）</p>

<pre><code>&gt;486
</code></pre>

<p>解析器的响应是打印出</p>

<pre><code>486
</code></pre>

<p>可以用基本过程的表达式（例如+或者*），将表示数的表达式组合起来，
形成复合表达式，以表示要把有关过程应用于这些数，例如：</p>

<pre><code>&gt;(+ 137 349)
486

&gt;(/ 10 5)
2

&gt;(* 2 6 12)
144
</code></pre>

<p>像上面这样的表达式称为组合式，其构成方式是用一对括号括起来一些表达式，
形成一个<em>表</em>，用于表示一个过程应用。在表最左边的元素成为运算符，其他
元素都称为运算对象。求值的过程就是将由运算符所刻画的过程应用于有关
的实际参数（运算对象的值）。</p>

<p>组合式的元素本身也可以是组合式：</p>

<pre><code>&gt;(- (* 3 5) (+ 5 6))
4
</code></pre>

<p>不但运算对象可以是组合式，运算符也可以是组合式，这个后续再讲。</p>

<h2>命名</h2>

<p>通过名字去使用计算对象，这是编程语言必不可少的方面。我们将名字标识符
称为变量，它的值就是他所对应的那个对象。</p>

<p>在Scheme里，给事物命名通过<code>define</code>的方式完成：</p>

<pre><code>&gt;(define size 2)
</code></pre>

<p>会导致解析器将值2与名字相关联。此后，我们就可以通过这个名字出引用值2了：</p>

<pre><code>&gt;size
2
</code></pre>

<p>应该看到，我们可以将值与符号关联，而后又能提取出这些值，这意味着解析器
必须维持某种存储能力，以便保持有关的名字-值对偶的轨迹，这种存储成为
环境。环境为求值过程的进行提供了种上下文，对于我们理解程序的执行起
着极其重要的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python使用百度翻译API]]></title>
    <link href="http://hswg.info/blog/2013/02/04/use-baidu-translate-api-by-python/"/>
    <updated>2013-02-04T18:30:00+08:00</updated>
    <id>http://hswg.info/blog/2013/02/04/use-baidu-translate-api-by-python</id>
    <content type="html"><![CDATA[<p>谷歌了一下，发现谷歌翻译API竟然要收费。退而求其次次，用Python写了个调用百度翻译API的工具。</p>

<!--more-->


<h3>使用前提</h3>

<p>你要有百度的<code>api_key</code>。如果你玩过百度的运环境（BAE），你已经有了。随便找一个应用
的API KEY就可以用了。
如何没用，你可以你可以在<a href="http://developer.baidu.com/wiki/index.php?title=%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E9%A6%96%E9%A1%B5/%E7%BD%91%E7%AB%99%E6%8E%A5%E5%85%A5/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97">这里</a>
了解如何获得app key。顺便还可以玩一下BAE。</p>

<h3>百度翻译API</h3>

<p><strong>URL</strong></p>

<pre><code>http://openapi.baidu.com/public/2.0/bmt/translate
</code></pre>

<p><strong>请求参数</strong></p>

<ul>
<li>from. 源语言语种：语言代码或auto</li>
<li>to. 目标语言语种：语言代码或auto</li>
<li>client_id. 上面说的api_key</li>
<li>q. 待翻译内容</li>
</ul>


<p><strong>返回内容</strong>
JSON字符串。示例如下：</p>

<pre><code>{"from":"en",
 "to":"zh",
 "trans_result":[{"src":"today","dst":"\u4eca\u5929"}]}
</code></pre>

<p>trans_result就是我们需要的翻译结果了。注意trans_result是数组，可能会没有或者有多个结果返回吧，
不过目前我还没碰到过。</p>

<h3>Python调用示例</h3>

<p>在Python使用这个API很简单，简单的就是范围URL，获取结果就是了。下面的代码比较偷懒，权当参考。</p>

<pre><code># -*- coding: utf-8 -*-
import urllib2
import urllib
import json

DU_TRANS_URL = 'http://openapi.baidu.com/public/2.0/bmt/translate?from=%s&amp;to=%s&amp;q=%s&amp;client_id=%s'
DU_CLIENT_ID = 'yourkeyyourkeyyourkeyyourkey'

def trans(slang, tlang, trans_str):
    du_url = DU_TRANS_URL % (slang, tlang, urllib.quote(trans_str), DU_CLIENT_ID)
    try:
        rsp = urllib2.urlopen(du_url)
    except Exception, e:
        raise Exception('Connecting to server fail:' + str(e)) 
    rs = json.load(rsp)
    if 'error_code' in rs:
        raise Exception('trans error:' + rs['error_msg'])
    if rs['trans_result']:
        return rs['trans_result'][0]['dst']
    else:
        raise Exception('No result')

def c2e(src):
    return trans('zh', 'en', src)

def e2c(src):
    return trans('en', 'zh', src)

if __name__ == '__main__':
    print c2e('这是中文')
</code></pre>

<p>我们的工具箱又多了一个翻译功能了。哈哈哈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式的贪婪与非贪婪模式]]></title>
    <link href="http://hswg.info/blog/2013/01/30/regex-greedy-and-non-greedy-mode/"/>
    <updated>2013-01-30T20:06:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/30/regex-greedy-and-non-greedy-mode</id>
    <content type="html"><![CDATA[<p>用正则表达式提取抓下来的网页时，得到的字符串总是比预料的多。
原来Python的正则表达式默认是贪婪的。贪婪的意思就是匹配时会
尽可能多的匹配。</p>

<!--more-->


<p>如正则表达式</p>

<pre><code>a.*b
</code></pre>

<p>匹配</p>

<pre><code>a3obs5bg
</code></pre>

<p>得到的结果是：</p>

<pre><code>a3obs5b
</code></pre>

<p>如果实际想要找的是：<code>a3ob</code> 该怎么办呢？把匹配模式改为非贪婪
的就可以了。</p>

<pre><code>a.*?b
</code></pre>

<p>将会匹配到：</p>

<pre><code>a3ob
</code></pre>

<p>其实不同的地方就是 <code>*</code>号后多了个 <code>?</code> 号。
<code>*? +? ?? {m,n}? 的作用是把* + ? {m,n}变成非贪婪模式。
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python抓取网页]]></title>
    <link href="http://hswg.info/blog/2013/01/29/use-python-fetch-webpage/"/>
    <updated>2013-01-29T19:21:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/29/use-python-fetch-webpage</id>
    <content type="html"><![CDATA[<h2>真的很简单</h2>

<p>最基本的抓取网页，真的很简单，一行代码就可以了</p>

<pre><code>import urllib2
html = urllib2.urlopen('http://thesite.com').read()
</code></pre>

<p>没有异常发生的话，html就是抓取页面的源文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Ajax方式上传文件]]></title>
    <link href="http://hswg.info/blog/2013/01/21/upload-files-with-ajax/"/>
    <updated>2013-01-21T19:03:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/21/upload-files-with-ajax</id>
    <content type="html"><![CDATA[<p>在HTML5出现之前，无刷新文件上传的思路一般是使用frame或flash。有一天，HTML5
带来了XMLHttpRequest第二版，它为Ajax上传文件带来的可能。所以，如果还要支持
IE6什么的就不必考虑这个方法了，甚至IE9也不行。</p>

<!--more-->


<p><img src="http://bcs.duapp.com/picfile/2013/1/b87d6d2069d4e7f1.png" alt="Alt Ajax上传图片" /></p>

<p>实现Ajax上传文件要用到两个对象：FormData, XMLHttpRequest。下面介绍这两个对象。</p>

<h3>FormData</h3>

<p>HTML5增加了一个FormData对象，FormData对象的作用是模拟表单数据，然后就可以用
Ajax的方式提交这个表单的数据，跟用正常方式提交表单一样。是不是很方便。</p>

<p>使用FormData的方式：</p>

<pre><code>var formData = new FormData();          //new一个表单对象
formData.append('field1', 'value1');    //添加一个name为'field1',值为'value1'的表单项表单项
formData.append('id', '123456');        //添加一个name为'id'的表单项
</code></pre>

<p>我们可以使用Ajax上传文件的一个基础就是，FormData可以包含文件表单项。如我们有选择文件的表单：</p>

<pre><code>&lt;input type="file" id='selfile'&gt;
</code></pre>

<p>我们可以这样把它添加进FormData对象。</p>

<pre><code>var file = document.getElementById("selfile").files[0];
formData.append('picfile', file);
</code></pre>

<p>FormData了解到这里已经足够了，下面就要的就是把&#8217;formData&#8217;发送到服务器。这就要用到<em>XMLHttpRequest</em>对象了。</p>

<h3>XMLHttpRequest对象</h3>

<p>XMLHttpRequest对象是Ajax的基础，用于在浏览器与服务器交换数据。</p>

<p>XMLHttpRequest的用法：</p>

<pre><code>var xhr = new XMLHttpRequest(); //新建一个XMLHttpRequest对象
xhr.open('POST', '/jsUpload');  //表单提交的地址
xhr.onload = function(){        //当服务器返回时，会调用函数
    if(xhr.status == 200){
        console.log('上传成功');
    }
    else{
        console.log('好像出错了，你查查呗'）；
    }
}
//假定已经有formData对象
xhr.onload.send(formData);      //发送数据
</code></pre>

<h3>进度条支持</h3>

<p>XMLHttpRequest第二版还增加了一个<code>onprogress</code>回调接口。有了这个实现进度条就很简单了。</p>

<h3>完整的示例</h3>

<p>HTML文件添加选择文件的表单。</p>

<pre><code>&lt;input type="file" id='selfile'&gt;
</code></pre>

<p>Javascript监听表单的改变事件，并在这个时间上传文件。</p>

<pre><code>var selFile = $('#selFile');
selFile.change(function(e){
    if(window.FormData){        //判断浏览器是否支持FormData对象
        var formData = new FormData();
        var file = e.target.files[0];
        formData.append('picfile', file);

        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/jsUpload');

        xhr.onload = function(){
            alert('上传完成');

            if(xhr.status &lt; 200 || xhr.status &gt; 299){
                alert('好像出了点问题');
            }
        }

        xhr.upload.onprogress = function (e){
            console.log('上传了....' + e.loaded / e.total * 100 + '%');          //进度信息
        }

        xhr.send(formData);
    }
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress技巧之设置关键字和描述]]></title>
    <link href="http://hswg.info/blog/2013/01/11/set-keywords-in-orcopress/"/>
    <updated>2013-01-11T21:39:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/11/set-keywords-in-orcopress</id>
    <content type="html"><![CDATA[<h3>关键字和描述</h3>

<p>这里所说的关键字和描述是指网页<code>head</code>部分的元标签<code>meta</code>，是给搜索引擎看的，以此希望用户可以比较容易找到本站。
在html上就是面所示的标签：</p>

<!--more-->


<pre><code>&lt;meta name="description" content="横竖弯钩是一个关注IT技术的博客"&gt;
&lt;meta name="keywords" content="IT, 编程, 码农的自嘲"&gt;
</code></pre>

<h3>Octopress设置关键字和描述的方法</h3>

<p>那么在Octopress的模板是怎么在页面设置这两个字段的呢？我们先看代码。打开文件: <code>source/_include/head.html</code>。
找到设置“description”和“keywords”的地方：</p>

<pre><code>{% capture description %}
  {% if page.description %}
    {{ page.description }}
  {% else %}
    {{ content | raw_content }}
  {% endif %}
{% endcapture %}
&lt;meta name="description" 
    content="{{ description | strip_html | condense_spaces | truncate:150 }}"&gt;

{% if page.keywords %}&lt;meta name="keywords" content="{{ page.keywords }}"&gt;{% endif %}
</code></pre>

<p>可以看出，“description”是取的是页面上的<code>description</code>字段, 就是在文件顶部被<code>---</code>包围起来的内容，关键字同样如此。
也就是说我们可以在每篇博客设置不同的关键和描述。</p>

<pre><code>---
layout: post
title: "文章的标题"
date: 2013-01-11 22:00
description: "在这里写上描述"
keywords: 关键字1，关键字2
comments: true
categories: 
---
###你的博客
你的博客正文
</code></pre>

<p>如上面的格式填上描述和关键字，Octopress帮你生成这一篇博客的页面就会包含你设置的关键字和描述了。如果你没有手动设置的话
，模板会帮你截取正文的一部分作为描述，至于关键字这个标签就没有了。</p>

<h3>首页如何设置</h3>

<p>从模板代码我发现了，它没有对首页做特殊处理。通常我们需要在首页写上作为全站的描述和关键字，而模板默认的行为是在第一篇博客截取
一部分作为描述。这显然不是我们要的结果。</p>

<p>那怎么办呢？在这个问题我走了一些冤枉路。大致过程就是在配置文件<code>_config.yml</code>增加这两个字段，然后修改模板，判断如果是首页就
取全局配置的关键字和描述。</p>

<p>虽然改起来很简单，但是后来我发现了更简单的方法，在这里分享下。其实首页也是一个页面，也会有上面提到的普通文章页面的配置信息。
<em>只要修改index.html</em>就可以了。
打开source/index.html，如下设置：</p>

<pre><code>---
layout: default
description: "只是一个你们搜索引擎都没收录的网站，你说我是瞎折腾么"
keywords: 技术，码农，单身, 单身，真的是单身
---
</code></pre>

<p>OK，就怎么简单。不过不要学上面的堆砌关键字，话说谷歌百度之流不喜欢。</p>

<h3>举一反三</h3>

<ol>
<li>对于网站其他页面，都可以用这个方法设置关键字和描述</li>
<li>页面上的配置信息，我们可以添加自己的字段进去，在模板用<code>page.[字段名]</code>就可以访问了。这样你就可以给每篇加上额外的信息了。
如<code>hide</code>:不显示；<code>forward</code>:转发。然后就可以在模板加上个性功能了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可爱的雪人]]></title>
    <link href="http://hswg.info/blog/2013/01/10/lovely-snowman/"/>
    <updated>2013-01-10T20:52:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/10/lovely-snowman</id>
    <content type="html"><![CDATA[<p>这是前几天晚上拍的照片，现在翻出来，突然发现挺好看的。贴出来分享下。</p>

<!--more-->


<p><img src="http://bcs.duapp.com/picfile/2013/1/2eaccc638a524c63.jpg" alt="lovely snownam'" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把博客放在Github]]></title>
    <link href="http://hswg.info/blog/2013/01/10/bloging-on-github/"/>
    <updated>2013-01-10T09:09:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/10/bloging-on-github</id>
    <content type="html"><![CDATA[<p>故事是这样的，我开始想要在vim写博客，找到Markdown是写技术博客的很好用的一种标记语言，
同时发现Github Pages可以托管用Markdown写的博客站点，然后就尝试在Github写博客。</p>

<!--more-->


<h3>Markdown</h3>

<p>Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，
然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。
Github的README.md文件就是用Markdown格式写的。在这里<a href="http://hswg.info/blog/2013/01/01/markdown/">了解Markdown语法</a>的语法，学习10分钟就可以用它写博客了，是不是很简单。</p>

<h3>Github Pages</h3>

<p>然后很自然的了解到了<a href="http://pages.github.com/">Github Pages</a>。Github设计了Pages功能，允许用户自定义用户首页，和项目首页。也就是说，
用户可以把静态页面托管到Github。当然，Github Pages的功能不止是托管静态页面，否则用html写博客，同时还要关注样式那是无法接受的。
Github Pages同时提供了模板功能，可以用解析引擎是Jekyll。</p>

<p>一句话教程：</p>

<blockquote><p>在gh-pages分支add一个index.html文件，push到github，访问<code>http://username.github.com/projectname/</code>就可以看见你发布的网页了。</p></blockquote>

<p>很重要一点，Github Pages支持<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">绑定域名</a>。</p>

<h3>Jekyll</h3>

<p>Jekyll是一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，不需要数据库，文章可以使用Markdown、HTML、Textile格式的文件保存。
Github可以解析符合Jekyll规范的网站源码。</p>

<p>使用上面说的仨，你就可以建立很酷的博客了，这个博客的特点是：</p>

<blockquote><ul>
<li>完善的版本管理，你可以找回你每一次新增、修改的信息。</li>
<li>在Github你可以有免费、无限的流量。</li>
<li>使用你喜欢的编辑器写博客，使用简洁的Markdown，不必在忍受在线编辑器。</li>
<li>绑定自己的域名。</li>
<li>当然，这样做很酷。</li>
</ul>
</blockquote>

<h3>Octopress</h3>

<p>使用上面的方案你就可以DIY你个人博客的每一部分。
从零开始不是多数人的选择，你可以参考开源的<a href="https://github.com/mojombo/jekyll/wiki/Sites">Jekyll模板</a>。
当然，你还可以选择Octopress。使用Octopress的方案也用到了上面的仨，不一样的地方在于Jekyll生成静态页面的过程发生在本地。使用它提供的发布命令<code>rake deploy</code>即可发布到github。
这样做带来的好处有：</p>

<blockquote><ul>
<li>有一系列便捷的命令负责生成、预览、发布、新建文章、新建页面等等。</li>
<li>有本地预览功能。</li>
<li>有一套还算美观的模版，这个模板修改起来还是很方便的。</li>
<li>网站源码和静态页面分离。可以在git以不同分支管理。</li>
</ul>
</blockquote>

<p>搭建Octopress参考<a href="http://octopress.org/docs/">官方文档</a>即可，在Linux下搭建还是很简单的。
在windows下，我的选择是在Cygwin下搭建，
中途出了点小问题，如果你要这样做，建议参考下：
<a href="http://hswg.info/blog/2013/01/07/octopress-on-cygwin/">在Cygwin搭建Octopress</a>,
这是在windows下的一个选择。直接在Windows安装也是可以的，只是我不喜欢使用Windows那烂得不行的Cmd。</p>

<h3>社会化评论</h3>

<p>大家或许想到了，静态页面怎么能有评论功能？一个答案就是社会化评论系统。
社会话评论系统的好处是方便管理，降低网站复杂度，分享功能有助网站推广。
坏处也很明显，数据不可控。当下，社会化评论是一个趋势。
<a href="http://hswg.info/blog/2013/01/09/using-social-comment/">这是</a>我在Octopress使用社会化评论的过程。</p>

<h3>域名</h3>

<p>访问部署在github的页面使用的网站是：<code>http://username.github.com/projectname/</code>。你也可以绑定自己的域名。
在Github Pages使用域名很方便。步骤如下：</p>

<ol>
<li>让网站根目录，也就是gh-pages分支的根目录，新建一个叫<code>CNAME</code>的文件,里面写上自己的域名。</li>
<li>如果绑定顶级域名，新建A记录指向<code>204.232.175.78</code>（这是Github的<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">文档</a>给出的，也许已经改变）</li>
<li>如果绑定二级域名，修改CNAME指向<code>username.github.com</code>即可。</li>
</ol>


<h3>再补充一点</h3>

<p>按照Github的<a href="https://help.github.com/articles/user-organization-and-project-pages">文档</a>，
<del>建立一个与用户名相同的仓库，把页面传到master分支，就可以用http://username.github.com/访问，
不过我试了下，没有成功(404)，有谁能指导下吗？</del>我理解错了，是建立一个名为<code>username.github.com</code>的仓库
(把username替换成你的用户名)，把页面放在master分支，就可以用<code>http://username.github.com</code>访问。
已试验成功。</p>

<p>好嘞，博客搭建完成。请在<a href="http://hswg.info/" title="横竖弯钩的博客">这里</a>看下效果：<a href="http://hswg.info/" title="横竖弯钩的博客">http://hswg.info</a></p>

<p>如果你有兴趣，也可以参考阮一峰的博客:
<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog&#8212;-github Pages和Jekyll入门</a></p>

<p>对了，这篇文章就是用Markdown写的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Otcopress使用社会化评论]]></title>
    <link href="http://hswg.info/blog/2013/01/09/using-social-comment/"/>
    <updated>2013-01-09T00:15:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/09/using-social-comment</id>
    <content type="html"><![CDATA[<p><em>在octopress中使用disqus很简单</em>，只要修改在配置文件“_config.yalm”：</p>

<pre><code># Disqus Comments
disqus_short_name: your_short_name  #在这里输入你在disqus注册时申请的short name
disqus_show_comment_count: false
</code></pre>

<!--more-->


<p>octopress的默认模板就会检测到<code>disqus_short_name</code>配置的存在，就会把Disqus评论插件显示出来了。
在文件<code>source/_layouts/post.html</code>,下面的代码就是负责把Disqus显示出来的。</p>

<p><img src="http://bcs.duapp.com/picfile/2013/1/de86c60b1e7b51f1.png" alt="disqus" />
这是默认配置下的Disqus的界面，可以出是英语的，目前语言也没有中文可配置。不过对我们博客的访客来说很大问题。
关键的问题是它支持社交平台都是墙外之物，或许以后Disqus跟它们混了，点了这伙就跑出来了：
<img src="http://bcs.duapp.com/picfile/2013/1/575181cb7965ec37.png" alt="404" /></p>

<p>目光转向国内。而目前业界提供这类方案的网站有友言(jiathis旗下产品)、评论啦、多说、Denglu评论(灯鹭旗下产品)。
最早听说的是“多说”，先<em>使用多说</em>。先上图：
<img src="http://bcs.duapp.com/picfile/2013/1/ff0d42b3f55937b0.png" alt="多说" /></p>

<p>国内土产就是不一样，中国特色主流社交帐号都可以登录，可以无障碍的在社交平台分享对博客来说还是很有意义的。
Octopress当然没有对多说内置支持，不过在模板添加进去还是很容易的。在刚才的Disqus插件代码上面，添加如下代码。</p>

<pre><code>&lt;!-- Duoshuo Comment BEGIN --&gt;
    &lt;div class="ds-thread"&gt;&lt;/div&gt;
    &lt;script type="text/javascript"&gt;
    var duoshuoQuery = {short_name:"your_short_name"};
    (function() {
        var ds = document.createElement('script');
        ds.type = 'text/javascript';ds.async = true;
        ds.src = 'http://static.duoshuo.com/embed.js';
        ds.charset = 'UTF-8';
        (document.getElementsByTagName('head')[0] 
        || document.getElementsByTagName('body')[0]).appendChild(ds);
    })();
    &lt;/script&gt;
&lt;!-- Duoshuo Comment END --&gt;
</code></pre>

<p>多说也是使用了short_name这个字段，short_name需要你到<a href="http://duoshuo.com/">多说</a>申请。我们可以参考Octopress的方法使用配置和插件的方式来使用多说，不过过度设计不是我的风格。
这样就赶上潮流，使用了一把设计化评论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim技巧之复制粘贴]]></title>
    <link href="http://hswg.info/blog/2013/01/08/vim-clipboard/"/>
    <updated>2013-01-08T13:37:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/08/vim-clipboard</id>
    <content type="html"><![CDATA[<h3>快速参考</h3>

<ul>
<li>粘贴系统剪切板的内容按<code>Shift+Insert</code>就可以了</li>
<li>使用<code>:reg</code>命令查看各个剪切板缓冲区的内容</li>
<li>粘贴命令是<code>p</code></li>
<li>粘贴剪贴板9的内容：<code>"9p</code>;如果有安装gvim，命令<code>"+p</code>可以粘贴系统前切板内容</li>
<li><code>yy</code>是复制一行</li>
<li>先按<code>v</code>，移动光标选中内容，按<code>y</code>可以复制选中区块</li>
<li><code>"7y</code>表示复制内容到剪切板7</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用BAE和百度云存储做了个简陋的图片上传应用]]></title>
    <link href="http://hswg.info/blog/2013/01/08/bae-pic/"/>
    <updated>2013-01-08T11:14:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/08/bae-pic</id>
    <content type="html"><![CDATA[<p>用BAE和百度云存储做了个简陋的图片存储应用，以后贴图就用这个来保存了。</p>

<p>地址：<a href="http://picfile.duapp.com">http://picfile.duapp.com</a></p>

<p>测试一下：</p>

<p><img src="http://bcs.duapp.com/picfile/2013/1/c8b1c55b83c19716.jpg" alt="test picture" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Cygwin搭建Octopress]]></title>
    <link href="http://hswg.info/blog/2013/01/07/octopress-on-cygwin/"/>
    <updated>2013-01-07T15:03:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/07/octopress-on-cygwin</id>
    <content type="html"><![CDATA[<p>用了半天时间在Ubuntu搭建了octopress，跟着octopress的<a href="http://octopress.org/docs/setup/">文档</a>一步一步来就可以了。
当我在本机的cygwin环境重复这一操作的时候，出现了一个小问题，记录一下。下面是操作步骤：</p>

<!--more-->


<ol>
<li>直接用Cygwin setup.exe安装Ruby，目前的版本就是文档要求的1.9.3，OK。</li>
<li>安装bundler

<pre><code> gem install bundler
</code></pre></li>
<li>进入octopress目录，执行bundle install

<pre><code> cd octopress
 bundle install
</code></pre>

问题出现了，关键提示如下：

<pre><code> posix-spawn.c:9:19: 致命错误：spawn.h：No such file or directory
</code></pre></li>
<li>上面的问题是由于posix-spawn的bug引起的，需要自己编译安装：

<pre><code> gem install rake-compiler -v 0.7.6
 git clone git://github.com/rtomayko/posix-spawn.git
 cd posix-spawn
 rake gem
 gem install pkg/posix-spawn-0.3.6
</code></pre></li>
<li>再执行<code>bundle install</code>就没用问题了。</li>
<li>享受octopress吧.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux笔记]]></title>
    <link href="http://hswg.info/blog/2013/01/07/linux-notes/"/>
    <updated>2013-01-07T11:27:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/07/linux-notes</id>
    <content type="html"><![CDATA[<p>设置系统代理</p>

<pre><code>export http_proxy=http://user:password@host:port
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python笔记]]></title>
    <link href="http://hswg.info/blog/2013/01/06/python-notes/"/>
    <updated>2013-01-06T20:22:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/06/python-notes</id>
    <content type="html"><![CDATA[<p>一些个人关于python的笔记</p>

<!--more-->


<p>python源文件包含非ASCII字符时，需要包含编码声明，文件是utf-8时，声明如下</p>

<pre><code># -*- coding: utf-8 -*-
</code></pre>

<p>tornado处理上传的文件</p>

<pre><code>class Upload(RequestHandler):
    def post(self):
        if self.request.files and 'picfile' in self.request.files:
            fobj = self.request.files['picfile'][0]
            #fobj是一个字典，键值有：filename, body, content_type
            #根据情况处理fobj就是了
</code></pre>

<p>抓取网页</p>

<pre><code>import urllib2
html = urllib2.openurl('http://website.xx').read()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress写博客]]></title>
    <link href="http://hswg.info/blog/2013/01/04/using-octopress/"/>
    <updated>2013-01-04T14:50:00+08:00</updated>
    <id>http://hswg.info/blog/2013/01/04/using-octopress</id>
    <content type="html"><![CDATA[<p>用了一下,总结几点吧：</p>

<ol>
<li>在本地生成Html</li>
<li>使用Jekyll生成</li>
<li>不觉得比在Github用Jekyll输出高明多少</li>
</ol>

]]></content>
  </entry>
  
</feed>
